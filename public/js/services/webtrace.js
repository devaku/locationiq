// Guest List Holder
// An array of objects that holds the details

let mainGuestList = [];

window.onload = function () {
    // Get the guest_list json that was received from the backend
    let guestJson = JSON.parse(
        document.querySelector('#ejs-var-guest_list').innerHTML
    );

    // Insert the values into the temporary holder
    guestJson.guest_list.forEach((item, index) => {
        mainGuestList.push({
            id: index + 1,
            ...item,
        });
    });

    // Add the cards onto the UI
    mainGuestList.forEach((item, index) => {
        // Do not add the first user, since meron na siya
        if (index > 0) {
            InitialGuestGeneration({ guestObject: item });
        }
    });

    // show initial modal for guest 1
    if (
        mainGuestList[0].health_q1 == null ||
        mainGuestList[0].acknowledgement == null
    ) {
        // Separated for now
        if (
            guestJson.order_method === 'DINE-IN' ||
            guestJson.order_method === 'DINE IN'
        ) {
            LoadEntryFromList({
                guestObject: mainGuestList[0],
                modalMode: 'EDIT',
            });

            // Open modal
            OpenModal({ modalMode: 'EDIT', isInitial: true });
        } else {
            // Load the details from the list
            LoadEntryFromList({
                guestObject: mainGuestList[0],
                modalMode: 'EDIT',
            });

            // Open modal
            OpenModal({ modalMode: 'EDIT', isInitial: true });
        }
    }
    ReloadTranslation();
};

// If the button add more exists, then attach the listener
if (document.querySelector('#button-add-more')) {
    document
        .querySelector('#button-add-more')
        .addEventListener('click', function (e) {
            document.querySelector('#modal-mode').value = 'ADD';
            ClearInputValues();
            OpenModal({ modalMode: 'ADD' });
        });
    ReloadTranslation();
}

document
    .querySelector('#button-submit')
    .addEventListener('click', async function (e) {
        LoadingView(true);
        // Remove the IDs from the mainGuestList
        mainGuestList.forEach((item) => {
            delete item.id;
        });

        let queryObject = GetQueryObject();
        let data = {
            queryObject,
            guestJson: mainGuestList,
        };

        let url = window.location.origin + '/web/service/webtrace/save';
        let fetchResponse = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then((response) => response.json())
            .catch((e) => {
                console.log('');
                console.log('FETCH ERROR');
                console.log(e);
            });

        ResponseHandler(fetchResponse);
        LoadingView(false);
        ReloadTranslation();
    });

function EventListenerButtonDelete(element) {
    DeleteGuestEntry({ el: element });
}

function OpenGuestDetails(element) {
    // Get the index associated with the guest
    // console.log('MAIN GUEST LIST');
    // console.log(mainGuestList);
    let guestID = element.querySelector('input[type=hidden]').value;
    // console.log(guestID);

    // Get the object from the mainGuestList
    let guestObject = mainGuestList.find((item) => {
        return item.id.toString() === guestID;
    });

    // console.log(guestObject);

    // Load the object to the modal
    LoadEntryFromList({ guestObject, modalMode: 'EDIT' });

    // Open the modal
    OpenModal({ modalMode: 'EDIT' });
}

// ===============
// MODAL FUNCTIONS
// ===============

function OpenModal({ modalMode, isInitial = false }) {
    if (modalMode === 'ADD') {
        // Show add more button
        document.querySelector('#modal-add-more').classList.remove('hidden');

        // Disable cancel button
        document.querySelector('#modal-button-cancel').classList.add('hidden');
    } else {
        // Hide add more
        document.querySelector('#modal-add-more').classList.add('hidden');

        // Only show cancel button if no longer initial
        if (!isInitial) {
            // Show cancel button
            document
                .querySelector('#modal-button-cancel')
                .classList.remove('hidden');
        }
    }
    DisplayModal('#trace-modal');
    ReloadTranslation();
}

function CloseTheModal() {
    CloseModal('#trace-modal');
}

// Adds guest that were generated by the modal
function AddMoreGuestDetails() {
    let isValid = MainValidation();
    if (isValid) {
        GenerateGuestEntry();
        ClearInputValues();
        ReloadTranslation();
        let text = document.querySelector('#sweet-text_AddedGuest').innerHTML;
        DisplaySweetAlertInfo(text);
    } else {
        let text = document.querySelector('#sweet-text_AnswerEveryQuestion')
            .innerHTML;
        DisplaySweetAlertError(text);
    }
}

function DoneGuestDetails(e) {
    let isValid = MainValidation();
    if (isValid) {
        // Check if edit mode or not
        let modalMode = document.querySelector('#modal-mode').value;
        if (modalMode === 'ADD') {
            GenerateGuestEntry();
        } else {
            EditGuestEntry();
        }
        ReloadTranslation();
        let text = document.querySelector('#sweet-text_AddedGuest').innerHTML;
        DisplaySweetAlertInfo(text);
        ClearInputValues();
        CloseModal('#trace-modal');
    } else {
        let text = document.querySelector('#sweet-text_AnswerEveryQuestion')
            .innerHTML;
        DisplaySweetAlertError(text);
    }
}

// ===============
// GUEST GENERATION
// ===============

// Is called upon loading the page to put in the existing users
// This is only for OPENING THE PAGE
function InitialGuestGeneration({ guestObject }) {
    // Get the box entries from the DOM
    let entries = document.querySelector('.scrollable-box');

    // get the current object id
    let latestId = guestObject.id;

    // console.log('INITIAL GUEST GENERATION');
    // console.log(latestId);

    let guestEntry = `
    <div>
        <div class="col-md-auto">
            <div class="field-group">
                <label
                    data-i18n="label_GuestOne"                
                    class="small"
                    for="name"
                    style="
                        --bgcolor: <?= uiStyle.bgcolor ?>;
                    "
                >
                    Guest 1
                </label>
                <button
                    onclick="OpenGuestDetails(this)"
                    class="element-full form-inputs item-space ejs-var-ui-text-style"
                >
                    <span>
                        ${guestObject.name}
                    </span>
                    <input
                        type="hidden"
                        name="index-value"
                        value="1"
                    />
                </button>
                <img onclick=EventListenerButtonDelete(this) src="/assets/stopsign.png" alt="Delete Entry" />

                <input type="hidden" name="index-value" value="${latestId}" />
            </div>
        </div>
    </div>
    `;

    // Insert
    entries.insertAdjacentHTML('beforeend', guestEntry);
}

function EditGuestEntry() {
    // Get the id of the current guest
    let guestID = document.querySelector('#guest-index').value;

    // Get guest from the mainGuestList
    let currentGuest = mainGuestList.find((item) => {
        return item.id.toString() === guestID;
    });

    // Get the new guest details
    let guestObject = GenerateGuestObject();

    // Overwrite the old details with the new ones
    currentGuest = {
        ...currentGuest,
        ...guestObject,
    };

    // Insert the new details back into the mainGuestList
    mainGuestList.forEach((item, index) => {
        // console.log(item);
        // Update the element that matches the guestID
        if (item.id.toString() === guestID) {
            // console.log(guestID);
            mainGuestList[index] = currentGuest;
        }
    });

    let parentNode = document.querySelector(
        `input[type=hidden][value="${guestID}"]`
    ).parentNode;

    // Update the card text on the UI
    parentNode.querySelector('span').innerHTML = currentGuest.name;

    ReloadTranslation();
    // console.log(mainGuestList);
}

// Add new entry to the guest list
function GenerateGuestEntry() {
    // Get the box entries from the DOM
    let entries = document.querySelector('.scrollable-box');

    // Count how many entries there are
    let entryCount = entries.childElementCount;

    // Find the highest number id
    let latestId = Math.max(...mainGuestList.map((item) => item.id));
    latestId += 1;

    // Generate the Guest Object
    let guestObject = GenerateGuestObject();

    // Append the new guest
    mainGuestList.push({
        id: latestId,
        ...guestObject,
    });

    // Get UI Style color
    let uiStyle = document.querySelector('#ejs-var-uistyle').innerHTML;
    uiStyle = JSON.parse(uiStyle);

    let guestEntry = `
    <div>
        <div class="col-md-auto">
            <div class="field-group">
                <label
                    class="small guest-count"
                    for="name"
                    style="--bgcolor: ${uiStyle.bgcolor}"
                >
                    <span data-i18n="label_GuestNumber">Guest</span>${latestId}
                </label>

                <div class="input-row">
                    <button
                    onclick="OpenGuestDetails(this)"
                    class="form-inputs item-space ejs-var-ui-text-style"
                    style="width: 90%;"
                >
                    <span>${guestObject.name}</span>
                    <input
                        type="hidden"
                        name="index-value"
                        value="${latestId}"
                    />
                    </button>
                    <div class="layout-column-center" style="align-items: center; justify-content: center;">
                        <img onclick=EventListenerButtonDelete(this) src="/assets/stopsign.png" alt="Delete Entry" />
                    </div>
                    
                </div>       
                <input type="hidden" name="index-value" value="1" />
            </div>
        </div>
    </div>

    `;

    // Insert
    entries.insertAdjacentHTML('beforeend', guestEntry);
}

function GenerateGuestObject() {
    // Get the inputs
    // let guestObject = {
    //     name: 'Jomel Piansay',
    //     phone: '12345678901234',
    //     address: null,
    //     health_q1: null,
    //     acknowledgement: null,
    // };

    let guestObject = {};

    let listInputs = Array.from(document.querySelectorAll('.ui-form-input'));
    listInputs.forEach((currentElement) => {
        // If the input is a textbox
        if (currentElement.type === 'text' || currentElement.type === 'tel') {
            let name = currentElement.name;
            guestObject[name] = currentElement.value.trim();
        } else if (currentElement.type === 'radio') {
            // Get the radio group attached to the current element
            let radioGroup = currentElement.name;

            // Determine if they are checked or not
            let listRadio = document.querySelectorAll(
                `input[name=${radioGroup}]:checked`
            );

            // If the list is empty, then there are none checked
            let flagValue = listRadio.length > 0 ? listRadio[0].value : false;
            guestObject[radioGroup] = flagValue;
        } else if (currentElement.type === 'checkbox') {
            guestObject[currentElement.name] = currentElement.checked;
        } else {
            DisplaySweetAlertError('Unhandled Input Validation! CHECK LOGS');
            console.log(currentElement);
        }
    });

    return guestObject;
}

function LoadEntryFromList({ guestObject, modalMode }) {
    // let guestObject = {
    //     name: 'Jomel Piansay',
    //     phone: '12345678901234',
    //     address: null,
    //     health_q1: null,
    //     acknowledgement: null,
    // };

    // Load the ID
    document.querySelector('#guest-index').value = guestObject.id;

    // Set the mode
    document.querySelector('#modal-mode').value = modalMode;

    for (const [key, value] of Object.entries(guestObject)) {
        let elementList = Array.from(
            document.querySelectorAll(`input[name=${key}]`)
        );

        if (elementList.length === 0) {
            continue;
        }

        // For the radio buttons
        if (elementList.length > 1) {
            let inputElement = elementList.find((el) => {
                return el.value === value;
            });
            if (inputElement) {
                inputElement.checked = 'checked';
            }
        }
        // For the text boxes and checkboxes
        else {
            elementList[0].checked = value;
            elementList[0].value = value;
        }
    }
}

// Remove guest entry
function DeleteGuestEntry({ el }) {
    // Get the box entries from the DOM
    let entries = document.querySelector('.scrollable-box');

    // Move up the DOM to get the parent node
    // Move up twice
    let mainParent = el.parentNode;
    mainParent = mainParent.parentNode;

    // Get index from the hidden value
    let referenceIndex = mainParent.querySelector('input[type=hidden]').value;

    // Find the index in the mainGuestList
    let guestListIndex = mainGuestList.findIndex((item) => {
        return item.id.toString() === referenceIndex;
    });

    // Remove the item from the guest list holder
    mainGuestList.splice(guestListIndex, 1);

    // Go up the tree, three times. lol
    mainParent = mainParent.parentNode;
    mainParent = mainParent.parentNode;
    mainParent = mainParent.parentNode;
    // console.log(mainParent);

    // Delete
    mainParent.remove();

    // Update the labels to reflect the new count
    let labelList = Array.from(document.querySelectorAll('.guest-count'));
    for (let x = 0; x < labelList.length; x++) {
        let currentLabel = labelList[x];
        currentLabel.innerHTML = `Guest ${x + 2}`;
    }
}

// ===============
// VALIDATION
// ===============

// Main function that handles validation of the inputs in the modal
function MainValidation() {
    // Remove all the ui-error notifications
    let errors = Array.from(document.querySelectorAll('.ui-error'));
    errors.forEach((currentElement) => {
        currentElement.classList.remove('ui-error');
    });

    // Get the inputs
    let listInputs = Array.from(
        document.querySelectorAll('.ui-form-input-validation')
    );

    let isValid = false;

    isValid = listInputs.every((currentElement) => {
        focusedInput = currentElement;
        let inputValidation = ValidateInputs(currentElement);
        return inputValidation;
    });

    if (isValid) {
        return true;
    } else {
        // Color the items that are invalid
        listInputs.forEach((currentElement) => {
            let inputValidation = ValidateInputs(currentElement);
            if (!inputValidation) {
                let parentElement = currentElement.parentNode;
                parentElement.classList.add('ui-error');
            }
        });
        return false;
    }
}

// Holds the validation logic
function ValidateInputs(currentElement) {
    // If the input is a textbox
    if (currentElement.type === 'text' || currentElement.type === 'tel') {
        // return true;
        // If blank, then invalid
        // return true;

        // SPECIFICALLY for temperature
        if (currentElement.name === 'temperature') {
            // Since optional
            return true;
            // return !isNaN(parseFloat(currentElement.value));
        } else {
            if (currentElement.value.trim() === '') {
                return false;
            } else {
                return true;
            }
        }
    } else if (currentElement.type === 'radio') {
        // return true;
        // Get the radio group attached to the current element
        let radioGroup = currentElement.name;

        // Determine if they are checked or not
        let listRadio = document.querySelectorAll(
            `input[name=${radioGroup}]:checked`
        );

        // If the list is empty, then there are none checked
        return listRadio.length > 0 ? listRadio[0].value : false;
    } else if (currentElement.type === 'checkbox') {
        // return true;
        return currentElement.checked;
    } else {
        DisplaySweetAlertError('Unhandled Input Validation! CHECK LOGS');
        console.log(currentElement);
    }
}

function ClearInputValues() {
    let listInputs = Array.from(document.querySelectorAll('.ui-form-input'));
    listInputs.forEach((currentElement) => {
        // If the input is a textbox
        if (currentElement.type === 'text' || currentElement.type === 'tel') {
            currentElement.value = '';
        } else if (currentElement.type === 'radio') {
            // Get the radio group attached to the current element
            let radioGroup = currentElement.name;

            // Determine if they are checked or not
            let listRadio = document.querySelectorAll(
                `input[name=${radioGroup}]`
            );

            // Uncheck all the radio buttons
            if (listRadio) {
                listRadio.forEach((item) => {
                    item.checked = false;
                });
            }
        } else if (currentElement.type === 'checkbox') {
            currentElement.checked = false;
        } else {
            DisplaySweetAlertError('Unhandled Input Validation! CHECK LOGS');
            console.log(currentElement);
        }
    });
}

// ===============
// HANDLERS
// ===============

function ResponseHandler(response) {
    let { status, data, message } = response;
    switch (status) {
        case 'success':
            SuccessHandler(data);
            break;
        case 'error':
            DisplaySweetAlertError(message);
            break;
        default:
            console.log(JSON.stringify(response));
            DisplaySweetAlertInfo('Unhandled response!');
    }
}

function SuccessHandler(data) {
    let { type } = data;
    switch (type) {
        case 'close':
            CloseWebview(data.isFacebook);
            break;
        default:
            console.log(JSON.stringify(data));
            DisplaySweetAlertInfo('Unhandled success response!');
    }
}
